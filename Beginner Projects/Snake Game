#!/bin/python3

from tkinter import *
import random                                                           # imports the random module

# setting constants for the game
GAME_WIDTH = 700
GAME_HEIGHT = 700
SPEED = 50
SPACE_SIZE = 50
BODY_PARTS = 3
SNAKE_COLOR = "#00FF00"                                                 # hex values. can also use the color name.
FOOD_COLOR = "#FF0000"
BACKGROUND_COLOR = "#000000"


# creating classes for the food and snake objects.
class Snake:
    def __init__(self):                                                 # this section defines the snake's initial body
        self.body_size = BODY_PARTS                                     # size and how body parts are added.
        self.coordinates = []
        self.squares = []

        for i in range(0, BODY_PARTS):
            self.coordinates.append([0, 0])

        for x, y in self.coordinates:
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag="snake")
            self.squares.append(square)


class Food:
    def __init__(self):                                                             # the food will be randomly placed
        x = random.randint(0, int(GAME_WIDTH/SPACE_SIZE)-1) + SPACE_SIZE                   # on the game board.
        y = random.randint(0, int(GAME_HEIGHT/SPACE_SIZE)-1) + SPACE_SIZE

        self.coordinates = [x, y]

        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tag="food")   # shape and color for the food.


# defines what happens to the snake and the food after each turn.
def next_turn(snake, food):
    x, y = snake.coordinates[0]

    if direction == "up":
        y -= SPACE_SIZE
    elif direction == "down":
        y += SPACE_SIZE
    elif direction == "left":
        x -= SPACE_SIZE
    elif direction == "right":
        x += SPACE_SIZE

    snake.coordinates.insert(0, (x, y))

    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)

    snake.squares.insert(0, square)
# the score will increase by 1, and the food will disappear and reappear if it is "eaten" during a turn.
    if x == food.coordinates[0] and y == food.coordinates[1]:
        global score

        score += 1

        label.config(text="Score:{}".format(score))

        canvas.delete("food")

        food = Food()

    else:
        del snake.coordinates[-1]

        canvas.delete(snake.squares[-1])

        del snake.squares[-1]

    if check_collision(snake):
        game_over()

    else:
        window.after(SPEED, next_turn, snake, food)


# defines how the snake changes direction.
def change_direction(new_direction):
    global direction

    if new_direction == 'left':
        if direction != 'right':
            direction = new_direction

    elif new_direction == 'right':
        if direction != 'left':
            direction = new_direction

    elif new_direction == 'down':
        if direction != 'up':
            direction = new_direction

    elif new_direction == 'up':
        if direction != 'down':
            direction = new_direction


# defines what happens if the snake crosses the boundary of the game board or its own body.
def check_collision(snake):
    x, y = snake.coordinates[0]

    if x < 0 or x >= GAME_WIDTH:
        print("GAME OVER.")
        return True

    elif y < 0 or y >= GAME_HEIGHT:
        print("GAME OVER.")
        return True

    for body_part in snake.coordinates[1:]:
        if x == body_part[0] and y == body_part[1]:
            print("GAME OVER")
            return True

    return False


# clears the board and displays 'GAME OVER' when the game is over.
def game_over():
    canvas.delete(ALL)
    canvas.create_text(canvas.winfo_width()/2, canvas.winfo_height()/2,
                       font=('Consolas', 70), text="GAME OVER", fill="red", tag="game over")


# creates a new window and titles it 'Snake Game'.
window = Tk()
window.title("Snake Game")
# the score will be 0, and the initial direction for the snake will be down.
score = 0
direction = "down"
# adds a label to the window to display the score.
label = Label(window,
              text="Score:{}".format(score),
              font=('Consolas', 40))
label.pack()                                                                    # displays the label.
# adds a canvas to the window.
canvas = Canvas(window,
                bg=BACKGROUND_COLOR,
                height=GAME_HEIGHT,
                width=GAME_WIDTH)
canvas.pack()                                                                   # displays the canvas.
# allows keys to be used to change the direction of the snake
window.bind('<Left>', lambda event: change_direction("left"))
window.bind('<Right>', lambda event: change_direction("right"))
window.bind('<Up>', lambda event: change_direction("up"))
window.bind('<Down>', lambda event: change_direction("down"))
# snake and food objects are created from the Snake and Food classes
snake = Snake()
food = Food()
# the next turn function is called to begin the game.
next_turn(snake, food)

window.mainloop()
