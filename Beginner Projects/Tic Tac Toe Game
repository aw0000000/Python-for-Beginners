#!/bin/python3

from tkinter import *
import random                                                               # imports the random module


# defines what happens after each turn.
def next_turn(row, column):
    global player
    if buttons[row][column]['text'] == "" and check_winner() is False:
        if player == players[0]:
            buttons[row][column]['text'] = player

            if check_winner() is False:
                player = players[1]
                label.config(text=(players[1]+" turn"))
            elif check_winner() is True:
                label.config(text=(players[0] + " wins"))
            elif check_winner() == "Tie":
                label.config(text="Tie.")
        else:
            buttons[row][column]['text'] = player

            if check_winner() is False:
                player = players[0]
                label.config(text=(players[0] + " turn"))
            elif check_winner() is True:
                label.config(text=(players[1] + " wins"))
            elif check_winner() == "Tie":
                label.config(text="Tie.")


# defines how the game is won (horizontally, vertically, or diagonally)
def check_winner():
    for row in range(3):                                                                                # vertical win
        if buttons[row][0]['text'] == buttons[row][1]['text'] == buttons[row][2]['text'] != "":
            buttons[row][0].config(bg="green")
            buttons[row][1].config(bg="green")
            buttons[row][2].config(bg="green")
            return True

    for column in range(3):                                                                             # horizontal win
        if buttons[0][column]['text'] == buttons[1][column]['text'] == buttons[2][column]['text'] != "":
            buttons[0][column].config(bg="green")
            buttons[1][column].config(bg="green")
            buttons[2][column].config(bg="green")
            return True
# the 2 statements below define diagonal wins.
    if buttons[0][0]['text'] == buttons[1][1]['text'] == buttons[2][2]['text'] != "":
        buttons[0][0].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][2].config(bg="green")
        return True

    elif buttons[0][2]['text'] == buttons[1][1]['text'] == buttons[2][0]['text'] != "":
        buttons[0][2].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][0].config(bg="green")
        return True
# defines a tie.
    elif empty_spaces() is False:
        for row in range(3):
            for column in range(3):
                buttons[row][column].config(bg="red")
        return "Tie."

    else:
        return False


# defines empty spaces.
def empty_spaces():
    spaces = 9

    for row in range(3):
        for column in range(3):
            if buttons[row][column]['text'] != "":
                spaces -= 1

    if spaces == 0:
        return False
    else:
        return True


# defines a new game
def new_game():
    global player
# a player ('x' or 'o') is chosen at random.
    player = random.choice(players)
# the game displays whose turn it is.
    label.config(text=player + " turn")

    for row in range(3):
        for column in range(3):
            buttons[row][column].config(text="", bg="#F0F0F0")


# creates a window for the game, gives the window a title, creates the players object, and specifies that the players will be chosen at random.
window = Tk()
window.title("Tic Tac Toe")
players = ["x", "o"]
player = random.choice(players)
# creates buttons for the game board.
buttons = [[0, 0, 0],
           [0, 0, 0],
           [0, 0, 0]]
# creates a label to display whose turn it is. the label will be at the top of the board.
label = Label(text=player + " turn", font=("Arial", 40))
label.pack(side="top")
# creates a reset button that will be displayed at the top of the board.
reset_button = Button(text="Restart", font=("Consolas", 20), command=new_game)
reset_button.pack(side="top")
# adds a frame to the window.
frame = Frame(window)
frame.pack()
# formats the buttons for the game.
for row in range(3):
    for column in range(3):
        buttons[row][column] = Button(frame, text="", font=("Consolas", 40), width=5, height=2,
                                                            command=lambda row=row, column=column: next_turn(row, column))
        buttons[row][column].grid(row=row, column=column)

window.mainloop()
