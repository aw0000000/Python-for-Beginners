Employees.py

#! /bin/python3




class Employees:
    def __init__(self, name, department, role, salary, years_employed):
        self.name = name
        self.department = department
        self.role = role
        self.salary = salary
        self.years_employed = years_employed


    def eligible_for_retirement(self):
        if self.years_employed >= 20:
            return True
        else:
            return False


ouremployees.py

#! /bin/python3


from Employees import Employees


e1 = Employees("Bob", "Sales", "Director of Sales", 100000, 20)
e2 = Employees("Linda", "Executive", "CIO", 150000, 10)


print(e1.name)  # Here we are passing objects as arguments
print(e2.role)
print(e1.eligible_for_retirement())


abstractclasses.py

#!/bin/python3

# abstract class: a class which contains 1 or more abstract methods.
# abstract method: a method that has a declaration but does not have an implementation.

from abc import ABC, abstractmethod  # abc = abstract based class


class Vehicle(ABC):  # The vehicle class is now an abstract class.
    @abstractmethod  # No methods can be created for the abstract class. Python will throw an error:
    def go(self):    # Can't instantiate abstract class Vehicle with abstract method go
        pass


class Car(Vehicle):
    def go(self):
        print("You drive a car.")


class Motorcycle(Vehicle):
    def go(self):
        print("You ride a motorcycle.")


car = Car()
motorcycle = Motorcycle()

car.go()
motorcycle.go()
