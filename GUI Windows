#!/bin/python3

from tkinter import *  # imports everything related to the tkinter module, which is used for GUIs.

# widgets: GUI elements (budgets, text boxes, labels, images, etc)
# windows: a container to hold these widgets

window = Tk()  # creates an instance of a window

window.geometry("400x200")  # determines the size of the window

window.title("Hello!")  # gives the window a title

window.config(background="grey")  # adds a color background to the window. can also use the hex value of a color.

# icon = PhotoImage(file='filepath') adds an image in the top left corner of the window (instead of a feather)
# window.iconphoto(True,name_of_PhotoImage(ex: icon))


# ADDING AN IMAGE TO THE WINDOW

photo = PhotoImage(file='image name or file path')  # adds an image within the window.


# ADDING A BUTTON TO THE WINDOW

def click():                               # The callback 'click' must be defined for us to use later.
    print("You clicked the button.")


button = Button(window,                    # adds a button within the window.
                text="Click here!",        # adds text to the button.
                command=click)             # callback.

button.pack()                              # displays the button within the window.)


# ADDING A FRAME TO THE WINDOW

def click():                               # click must be defined for us to use later.
    print("You clicked the button.")

def dontclick():
    print("You should not have clicked the button.")

frame = Frame(window)                      # adds a frame to the window.
frame.pack()                               # displays the frame within the window.

button = Button(frame,                     # adds a button within the frame.
                text="Click here!",        # adds text to the button.
                command=click)             # callback.

button.pack()

button = Button(frame,
                text="Don't click here!",
                command=dontclick)
button.pack()  


# ADDING TEXT TO THE WINDOW

label = Label(window,
              text="Hello, World!",  # label specifies the label to be added to the window.
              font=("Arial", 20),    # font is used to specify the font, font size, and style.
              fg="white",            # fg specifies the font color.
              bg="black",            # bg specifies the background for the font.
              relief=RIDGE,          # relief is used to add a border effect.
              bd=5,                  # bd changes the width of the border.
              image=photo,           # image adds an image to the widget.
              compound='bottom')     # compound allows more than one object to be added to the widget.

label.pack()  # displays the widget within the window.
# label.place() can be used to change the placement of the widget.


# ADDING AN ENTRY BOX TO THE WINDOW

entry = Entry(window,                        # creates an entry box.
              font=("Times New Roman", 40))

entry.pack(side=RIGHT)                       # specifies where to place the entry box.


# NEW WINDOW

def create_window():
    window_2 = Tk()                 # can also use Toplevel(). the new window will be created 'on top' of our first window.
                                    # if we close our 'top' window, all 'bottom' windows will close.

# GRID GEOMETRY MANAGER

    Label(window_2, text="First name: ").grid(row=0,column=0)  # adds a grid to the window.
    Entry(window_2).grid(row=0,column=1)                       # row 0 and column 0 are the first row and column.

    Label(window_2, text="Last name: ").grid(row=1,column=0)
    Entry(window_2).grid(row=1,column=1)

    Label(window_2, text="Email: ").grid(row=2, column=0)
    Entry(window_2).grid(row=2,column=1)

    Button(window_2,text="Submit").grid(row=3,column=0,columnspan=2)            # setting column span to 2 centers the submit button.

Button(window,text="New Window",command=create_window).pack()


# WINDOW TABS

from tkinter import ttk                         # gives access to additional widget.

notebook = ttk.Notebook(window)                 # widget that manages a collection of windows/displays

tab1 = Frame(notebook)                          # new frame for tab 1.
tab2 = Frame(notebook)                          # new frame for tab 2.
tab3 = Frame(notebook)                          # new frame for tab 3.

notebook.add(tab1,text="Tab1")                  # adding tabs to the widget
notebook.add(tab2,text="Tab2")
notebook.add(tab3,text="Tab3")

notebook.pack()

Label(tab1,text="This is Tab 1").pack()         # adding text to the tabs.
Label(tab2,text="This is Tab 2").pack()
Label(tab3,text="This is Tab 3").pack()


# ADDING A CHECK BUTTON/CHECKBOX TO THE WINDOW

# The callback must be defined before we can use it.


def display():
    if(x.get())==1:                                                         # creating an if statement for if the button is checked.
        print("You agree to follow the rules for guest wifi use.")
    else:
        print("You have not agreed to follow the rules for guest wifi use.")


x = IntVar()

check_button = Checkbutton(window,
                           text="I have read the guest wifi user agreement.",
                           variable=x,                                      # setting a variable, x, for the check button.
                           onvalue=1,                                       # onvalue = button checked
                           offvalue=0,                                      # offvalue = button unchecked
                           command=display)

check_button.pack()                                                         # this is needed to display the check button in the window.


# ADDING RADIO BUTTONS TO THE WINDOW

choice = ["Agree", "Somewhat Agree", "Neither Agree or Disagree", "Somewhat Disagree", "Disagree"]

x = IntVar()

for index in range(len(choice)):
    radiobutton = Radiobutton(window,
                              text=choice[index],  # This creates radio buttons for each choice.
                              variable=x,          # Setting a variable, x, for the radio button.
                              value=index,         # Each radio button has a different value so they aren't all selected.
                              font="bold",
                              bg="grey")        
    radiobutton.pack(anchor=W)
    
 
# ADDING A LISTBOX TO THE WINDOW

listbox = Listbox(window,
                  height=4,
                  bg="#f6ffde",
                  font=("Arial",20))
listbox.pack()

label = Label(window,
              text="Incident Status",
              font="bold")

label.pack()

listbox.insert(1,"False Positive")
listbox.insert(2,"False Negative")
listbox.insert(3,"True Positive")
listbox.insert(4,"True Negative")


# ADDING A MESSAGE BOX TO THE WINDOW

from tkinter import messagebox         # import messagebox library

def click():
    messagebox.showwarning(title="WARNING!",message="You will be logged out due to inactivity. Stay logged in?")

button = Button(window,command=click,text="Stay Logged In?")
button.pack()


# COLOR CHOOSER

from tkinter import colorchooser

def click():
    color = colorchooser.askcolor()
    colorHex = color[1]
    window.config(bg=colorHex)        # change background color.


# TEXT BOX (ALLOWS FOR MULTIPLE LINES OF TEXT)

text = Text(window)
text.pack()


# MENUBAR

# Commands must be defined before use.
def openFile():
    print("File has been opened.")


def saveFile():
    print("File has been saved.")


def saveFileasType():
    print(input("Enter file extension: "))
    print("File has been saved.")


def undoChanges():
    print(input("Enter ctrl+Z: "))
    print("Action undone.")


def cut():
    print("You cut some text.")


def copy():
    print("You copied some text.")


def paste():
    print("You pasted some text.")


menu_bar = Menu(window)
window.config(menu=menu_bar)

fileMenu = Menu(menu_bar, tearoff=0)                   # Creates a File menu and removes the perforated line.
menu_bar.add_cascade(label="File", menu=fileMenu)      # Adds the label "File" to the File menu.
fileMenu.add_command(label="Open",command=openFile)                     # Adding clickable commands to the File menu.
fileMenu.add_command(label="Save",command=saveFile)
fileMenu.add_command(label="SaveAs",command=saveFileasType)
fileMenu.add_separator()                               # Adds a separator to the File menu.
fileMenu.add_command(label="Exit",command=quit)

editMenu = Menu(menu_bar, tearoff=0)                   # Creates an Edit menu and removes the perforated line.
menu_bar.add_cascade(label="Edit", menu=editMenu)      # Adds the label "Edit" to the Edit menu.
editMenu.add_command(label="Undo",command=undoChanges)                     # Adding clickable commands to the Edit menu.
editMenu.add_separator()                               # Adds a separator to the Edit menu.
editMenu.add_command(label="Cut",command=cut)
editMenu.add_command(label="Copy",command=copy)
editMenu.add_command(label="Paste",command=paste)


# PROGRESS BAR

from tkinter.ttk import *


def start():
    bar['value'] += 10                          # when the 'download' button is clicked, progress increases by 10%
    if bar['value'] == 100:
        print("Task complete!")                 # prints "Task complete!" once progress reaches 100%


window = Tk()

bar = Progressbar(window,orient=HORIZONTAL)     # gives the progress bar a horizontal orientation

bar.pack()

Button(window,text="download",command=start).pack()


# CANVAS WIDGET

from tkinter import *

window = Tk()

canvas = Canvas(window)                                                         # adds the canvas widget to the window.
canvas.create_rectangle(50,50,250,250, fill="pink",outline="light blue")        # adds a shape to the canvas.
canvas.pack()                                                                   # displays the canvas.

# ADDING DRAGGABLE OBJECTS


from tkinter import *


def drag_start(event):
    widget = event.widget
    widget.startX = event.x
    widget.startY = event.y


def drag_motion(event):
    widget = event.widget                           # using widget instead of label applies definition to both labels.
    x = widget.winfo_x() - widget.startX + event.x
    y = widget.winfo_y() - widget.startY + event.y
    widget.place(x=x,y=y)


window = Tk()

label = Label(window,bg="red",width=10,height=5)
label.place(x=0,y=0)                                # coordinates for the first object. arbitrary.

label2 = Label(window,bg="blue",width=10,height=5)
label2.place(x=100,y=100)                           # coordinates for the second object. arbitrary.

label.bind("<Button-1>",drag_start)                 # selects the object with a left mouse click.
label.bind("<B1-Motion>",drag_motion)               # moving the mouse also moves the object.

label2.bind("<Button-1>",drag_start)
label2.bind("<B1-Motion>",drag_motion)


# MOVING IMAGES IN A WINDOW USING KEYS

# Define the commands for moving the image.

def move_up(event):
    label.place(x=label.winfo_x(), y=label.winfo_y()-10)        # moves the image down on the y-axis.


def move_down(event):
    label.place(x=label.winfo_x(), y=label.winfo_y()+10)        # moves the image up on the y-axis.


def move_left(event):
    label.place(x=label.winfo_x()-10, y=label.winfo_y())        # moves the image left on the x-axis.


def move_right(event):
    label.place(x=label.winfo_x()+10, y=label.winfo_y())        # moves the image right on the x-axis.

window.geometry("500x500")

window.bind("<Up>",move_up)
window.bind("<Down>",move_down)
window.bind("<Left>",move_left)
window.bind("<Right>",move_right)

photo = PhotoImage(file='image name or file path')              # specifies the image being used.

label = Label(window,
              image=photo)                                      # adds the image to the window.

label.place(x=0,y=0)                                            # places the image in the top left corner.


# MOVING IMAGES ON A CANVAS USING KEYS

def move_up(event):
    canvas.move(photo,0,-10)


def move_down(event):
    canvas.move(photo,0,10)


def move_left(event):
    canvas.move(photo,-10,0)


def move_right(event):
    canvas.move(photo,10,0)


window.bind("<Up>",move_up)
window.bind("<Down>",move_down)
window.bind("<Left>",move_left)
window.bind("<Right>",move_right)


canvas = Canvas(window,
                width=500,
                height=500,)
canvas.pack()

photoimage = PhotoImage(file='image name or file path')
photo = canvas.create_image(0,0,image=photoimage)


window.mainloop()  # displays window on the screen and listens for events. THIS MUST BE INCLUDED FOR THE WINDOW TO APPEAR.
