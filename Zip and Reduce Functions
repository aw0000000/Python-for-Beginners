zipfunction.py

#!/bin/python3

# zip(iterables) is a way to aggregate elements from 2 or more iterables (lists, tuples, sets, etc.).

usernames = ["Admin", "Janis", "Cady"]
passwords = ["admin", "password123", "guest"]
last_login = ["1/1/2023", "1/2/2023", "1/3/2023"]

# Creates a zip object with paired elements stored in a tuple for each element in zip()
users = zip(usernames, passwords, last_login)
for i in users:
    print(i)

print()  # New line.

# Creates a list of tuples.
users = list(zip(usernames, passwords, last_login))
for i in users:
    print(i)

print()  # New line.

# Zips our elements into a dictionary of key:value pairs.
users = dict(zip(usernames, passwords))
for key, value in users.items():
    print(key + " : " + value)  # This is optional. print(key,value) is also an option.


reducefunction.py

#!/bin/python3

# reduce() applies a function to an iterable and reduces it to a single cumulative value.
# performs the function on the first 2 elements and repeats the process until 1 value remains.
# syntax is reduce(function, iterable)

import functools  # Import functools to use the reduce() function.

letters = ["H", "E", "L", "L", "O"]
word = functools.reduce(lambda x, y: x + y, letters)
print(word)
